#!/bin/bash

# simple run on localhost (WPS+real+WRF) 
# ./run-wrf -hosts localhost:4 -np 4

# Just real + WRF (met* files from WPS) - 4 cores, 4 processes (don't need to have /WPS_GEOG)
# ./run-wrf -skip wps -hosts localhost:4 -np 4

# Just WRF (met* files from WPS and wrfbdy* + wrfinput* from real in /wrfinput) - 4 cores, 4 processes
# ./run-wrf -skip wps -skip real -hosts localhost:4 -np 4

# multiple machines (WPS+real+WRF): all machines must access /wrfinput and /WPS_GEOG
# ./run-wrf -hosts machine1:2,machine2:2 -np 4

#Initalize options

num_procs=1
process_per_host=1
skip_wps=false
skip_real=false
my_namelist=false
hosts=127.0.0.1

#
# variables need to match docker container volume names:
WRF_BUILD="/wrf"
INPUT_DIR="/wrfinput"
OUTPUT_DIR="/wrfoutput"
WPS_INPUT="/wrfinput"
#

# Read in command line options

while (( $# > 1 ))
do

opt="$1"
case $opt in

   "-np")
        num_procs="$2"
        shift
        ;;

# wpsdir by default = /wrfinput
   "-wpsdir")
	WPS_INPUT="$2"
	shift
	;;

# hosts format = "machine:slot,machine2:slot2" (comma separated, name:slot)
   "-hosts")  
        hosts="$2"
        shift
        ;;

   "-skip")
        skip_stuff="$2"
	   if [[ $skip_stuff == "wps" ]]; then
             skip_wps=true
           fi
           if [[ $skip_stuff == "real" ]]; then
             skip_real=true
           fi
       shift
       ;;

   *)
        echo "Usage: Incorrect"
        exit 15
        ;;
esac
shift
done

echo "num_procs = " $num_procs
echo "skip_wps  = " $skip_wps
echo "skip_real = " $skip_real
echo "wps_dir = " $WPS_INPUT
# End sample argument list

# Set input data contain location

#	To run the test, bring in the correct namelist.wps, and link the Grib data,
#	select the right Vtable.

cd $WRF_BUILD/WPS

if [ $skip_wps = "false" ]; then #Don't skip wps
echo "Starting WPS"

cd $WRF_BUILD/WPS

#if [ ! -e namelist.wps.ORIG ]; then
#	cp -f namelist.wps namelist.wps.ORIG
#fi

# Get namelist and correct Vtable based on data
# The Vtable is dependent on the data that is used
# Will need to pull this in dynamically somehow, tie to data/namelist

cp -f $INPUT_DIR/namelist.wps .
cp -f $INPUT_DIR/Vtable.GFS Vtable

# Link input data
./link_grib.csh $INPUT_DIR/*_*

##################################
#     Run the geogrid program    #
##################################

echo "- geogrid"

# Command for geogrid
  ./geogrid.exe >& print.geogrid.txt

# KRF: How much "checking" do we want?
# Check success
  ls -ls geo_em.d01.nc
  OK_geogrid=$?

  if [ $OK_geogrid -eq 0 ]; then
	echo OK geogrid ran fine
	echo Completed geogrid, Starting ungrib at `date`
	echo
	tail print.geogrid.txt
	echo
  else
	echo
	echo TROUBLES
	echo geogrid did not complete
	echo
	cat geogrid.log
	echo
	exit 444
  fi

##################################
#    Run the ungrib program      #
##################################

echo "- ungrib"


# Command for ungrib
  ./ungrib.exe >& print.ungrib.txt

  ls -ls FILE:*
  OK_ungrib=$?

  if [ $OK_ungrib -eq 0 ]; then
	echo OK ungrib ran fine
	echo Completed ungrib, Starting metgrid at `date`
	echo
	tail print.ungrib.txt
	echo
  else
	echo
	echo TROUBLES
	echo ungrib did not complete
	echo
	cat ungrib.log
	echo
	exit 555
  fi

##################################
#     Run the metgrid program    #
##################################

echo "- metgrid"

# Command for metgrid
  ./metgrid.exe >& print.metgrid.txt

# Check sucess
  ls -ls met_em.d01.*
  OK_metgrid=$?

  if [ $OK_metgrid -eq 0 ]; then
	echo OK metgrid ran fine
	echo Completed metgrid, Starting program real at `date`
	echo
	tail print.metgrid.txt
	echo
  else
	echo
	echo TROUBLES
	echo metgrid did not complete
	echo
	cat metgrid.log
	echo
	exit 666
  fi
fi



##################################
#    Move to WRF                 #
##################################

# Go to test directory where tables, data, etc. exist
# Perform wrf run here.

echo "Starting WRF"

cd $WRF_BUILD/WRFV3/run

cp $INPUT_DIR/namelist.input .

##################################
#     Run the real program       #
##################################

if [ $skip_wps = "false" ]; then # Don't skip real if true
  # Link data from WPS
  ln -sf $WRF_BUILD/WPS/met_em.d0* .

else # skip_wps = true
	
   # Link data from wrfinput
  ln -sf $WPS_INPUT/met_em.d0* .
  
fi # end if skip_wps

if [ $skip_real = "false" ]; then # Don't skip real if true
echo "- real"

# Command for real
         ./real.exe

# Check success
  ls -ls wrfinput_d01
  OK_wrfinput=$?

  ls -ls wrfbdy_d01
  OK_wrfbdy=$?

  if [ $OK_wrfinput -eq 0 ] && [ $OK_wrfbdy -eq 0 ]; then
	echo OK real ran fine
        echo
	tail rsl.error.0000
        echo

  else
	echo
	echo TROUBLES
	echo the real program did not complete
	echo
	cat rsl.error.0000
	echo
	exit 777
  fi

else # skip_real = true
   cp $INPUT_DIR/wrfi* .
   cp $INPUT_DIR/wrfb* .

fi # end skip_real = false

##################################
#   Run the WRF forecast model.  #
##################################

echo "- wrf"
# generate machine list
# $hosts in the format "machine1:2,machine2:4", i.e., machine:slots
IFS=,
ary=($hosts)
for key in "${!ary[@]}"; do echo "${ary[$key]}:${process_per_host}" >> /wrf/hosts; done

# Command for mpi wrf in Docker world
#
# hostfile in mpich format
time mpirun -hostfile /wrf/hosts -np $num_procs ./wrf.exe

# Check success
  ls -ls /$OUTPUT_DIR/wrfo*
  OK_wrfout=$?

  if [ $OK_wrfout -eq 0 ]; then
	echo OK wrf ran fine
	echo Completed WRF model with $FCST_LENGTH_HOURS hour simulation at `date`
	echo
	tail rsl.error.0000
	echo
  else
	echo
	echo TROUBLES
	echo the WRF model did not complete
	echo
	cat rsl.error.0000
	echo
	exit 888
  fi

echo

